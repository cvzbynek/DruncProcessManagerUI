// source: process_manager.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var request_response_pb = require('./request_response_pb.js');
goog.object.extend(proto, request_response_pb);
goog.exportSymbol('proto.DUNEProcessManager.BootRequest', null, global);
goog.exportSymbol('proto.DUNEProcessManager.LogLine', null, global);
goog.exportSymbol('proto.DUNEProcessManager.LogRequest', null, global);
goog.exportSymbol('proto.DUNEProcessManager.ProcessDescription', null, global);
goog.exportSymbol('proto.DUNEProcessManager.ProcessDescription.ExecAndArgs', null, global);
goog.exportSymbol('proto.DUNEProcessManager.ProcessDescription.StringList', null, global);
goog.exportSymbol('proto.DUNEProcessManager.ProcessInstance', null, global);
goog.exportSymbol('proto.DUNEProcessManager.ProcessInstance.StatusCode', null, global);
goog.exportSymbol('proto.DUNEProcessManager.ProcessInstanceList', null, global);
goog.exportSymbol('proto.DUNEProcessManager.ProcessMetadata', null, global);
goog.exportSymbol('proto.DUNEProcessManager.ProcessQuery', null, global);
goog.exportSymbol('proto.DUNEProcessManager.ProcessRestriction', null, global);
goog.exportSymbol('proto.DUNEProcessManager.ProcessUUID', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DUNEProcessManager.ProcessRestriction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DUNEProcessManager.ProcessRestriction.repeatedFields_, null);
};
goog.inherits(proto.DUNEProcessManager.ProcessRestriction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DUNEProcessManager.ProcessRestriction.displayName = 'proto.DUNEProcessManager.ProcessRestriction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DUNEProcessManager.LogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DUNEProcessManager.LogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DUNEProcessManager.LogRequest.displayName = 'proto.DUNEProcessManager.LogRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DUNEProcessManager.LogLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DUNEProcessManager.LogLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DUNEProcessManager.LogLine.displayName = 'proto.DUNEProcessManager.LogLine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DUNEProcessManager.ProcessUUID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DUNEProcessManager.ProcessUUID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DUNEProcessManager.ProcessUUID.displayName = 'proto.DUNEProcessManager.ProcessUUID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DUNEProcessManager.ProcessMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DUNEProcessManager.ProcessMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DUNEProcessManager.ProcessMetadata.displayName = 'proto.DUNEProcessManager.ProcessMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DUNEProcessManager.ProcessQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DUNEProcessManager.ProcessQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DUNEProcessManager.ProcessQuery.displayName = 'proto.DUNEProcessManager.ProcessQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DUNEProcessManager.ProcessDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DUNEProcessManager.ProcessDescription.repeatedFields_, null);
};
goog.inherits(proto.DUNEProcessManager.ProcessDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DUNEProcessManager.ProcessDescription.displayName = 'proto.DUNEProcessManager.ProcessDescription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DUNEProcessManager.ProcessDescription.StringList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DUNEProcessManager.ProcessDescription.StringList.repeatedFields_, null);
};
goog.inherits(proto.DUNEProcessManager.ProcessDescription.StringList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DUNEProcessManager.ProcessDescription.StringList.displayName = 'proto.DUNEProcessManager.ProcessDescription.StringList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DUNEProcessManager.ProcessDescription.ExecAndArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.repeatedFields_, null);
};
goog.inherits(proto.DUNEProcessManager.ProcessDescription.ExecAndArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.displayName = 'proto.DUNEProcessManager.ProcessDescription.ExecAndArgs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DUNEProcessManager.ProcessInstance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DUNEProcessManager.ProcessInstance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DUNEProcessManager.ProcessInstance.displayName = 'proto.DUNEProcessManager.ProcessInstance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DUNEProcessManager.BootRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DUNEProcessManager.BootRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DUNEProcessManager.BootRequest.displayName = 'proto.DUNEProcessManager.BootRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DUNEProcessManager.ProcessInstanceList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DUNEProcessManager.ProcessInstanceList.repeatedFields_, null);
};
goog.inherits(proto.DUNEProcessManager.ProcessInstanceList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DUNEProcessManager.ProcessInstanceList.displayName = 'proto.DUNEProcessManager.ProcessInstanceList';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DUNEProcessManager.ProcessRestriction.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DUNEProcessManager.ProcessRestriction.prototype.toObject = function(opt_includeInstance) {
  return proto.DUNEProcessManager.ProcessRestriction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DUNEProcessManager.ProcessRestriction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessRestriction.toObject = function(includeInstance, msg) {
  var f, obj = {
    allowedHostsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    allowedHostTypesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DUNEProcessManager.ProcessRestriction}
 */
proto.DUNEProcessManager.ProcessRestriction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DUNEProcessManager.ProcessRestriction;
  return proto.DUNEProcessManager.ProcessRestriction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DUNEProcessManager.ProcessRestriction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DUNEProcessManager.ProcessRestriction}
 */
proto.DUNEProcessManager.ProcessRestriction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowedHosts(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowedHostTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DUNEProcessManager.ProcessRestriction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DUNEProcessManager.ProcessRestriction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DUNEProcessManager.ProcessRestriction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessRestriction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllowedHostsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getAllowedHostTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string allowed_hosts = 1;
 * @return {!Array<string>}
 */
proto.DUNEProcessManager.ProcessRestriction.prototype.getAllowedHostsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.DUNEProcessManager.ProcessRestriction} returns this
 */
proto.DUNEProcessManager.ProcessRestriction.prototype.setAllowedHostsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.DUNEProcessManager.ProcessRestriction} returns this
 */
proto.DUNEProcessManager.ProcessRestriction.prototype.addAllowedHosts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DUNEProcessManager.ProcessRestriction} returns this
 */
proto.DUNEProcessManager.ProcessRestriction.prototype.clearAllowedHostsList = function() {
  return this.setAllowedHostsList([]);
};


/**
 * repeated string allowed_host_types = 2;
 * @return {!Array<string>}
 */
proto.DUNEProcessManager.ProcessRestriction.prototype.getAllowedHostTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.DUNEProcessManager.ProcessRestriction} returns this
 */
proto.DUNEProcessManager.ProcessRestriction.prototype.setAllowedHostTypesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.DUNEProcessManager.ProcessRestriction} returns this
 */
proto.DUNEProcessManager.ProcessRestriction.prototype.addAllowedHostTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DUNEProcessManager.ProcessRestriction} returns this
 */
proto.DUNEProcessManager.ProcessRestriction.prototype.clearAllowedHostTypesList = function() {
  return this.setAllowedHostTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DUNEProcessManager.LogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DUNEProcessManager.LogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DUNEProcessManager.LogRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.LogRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: (f = msg.getQuery()) && proto.DUNEProcessManager.ProcessQuery.toObject(includeInstance, f),
    howFar: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DUNEProcessManager.LogRequest}
 */
proto.DUNEProcessManager.LogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DUNEProcessManager.LogRequest;
  return proto.DUNEProcessManager.LogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DUNEProcessManager.LogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DUNEProcessManager.LogRequest}
 */
proto.DUNEProcessManager.LogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DUNEProcessManager.ProcessQuery;
      reader.readMessage(value,proto.DUNEProcessManager.ProcessQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHowFar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DUNEProcessManager.LogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DUNEProcessManager.LogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DUNEProcessManager.LogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.LogRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DUNEProcessManager.ProcessQuery.serializeBinaryToWriter
    );
  }
  f = message.getHowFar();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional ProcessQuery query = 1;
 * @return {?proto.DUNEProcessManager.ProcessQuery}
 */
proto.DUNEProcessManager.LogRequest.prototype.getQuery = function() {
  return /** @type{?proto.DUNEProcessManager.ProcessQuery} */ (
    jspb.Message.getWrapperField(this, proto.DUNEProcessManager.ProcessQuery, 1));
};


/**
 * @param {?proto.DUNEProcessManager.ProcessQuery|undefined} value
 * @return {!proto.DUNEProcessManager.LogRequest} returns this
*/
proto.DUNEProcessManager.LogRequest.prototype.setQuery = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DUNEProcessManager.LogRequest} returns this
 */
proto.DUNEProcessManager.LogRequest.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DUNEProcessManager.LogRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 how_far = 2;
 * @return {number}
 */
proto.DUNEProcessManager.LogRequest.prototype.getHowFar = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DUNEProcessManager.LogRequest} returns this
 */
proto.DUNEProcessManager.LogRequest.prototype.setHowFar = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DUNEProcessManager.LogLine.prototype.toObject = function(opt_includeInstance) {
  return proto.DUNEProcessManager.LogLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DUNEProcessManager.LogLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.LogLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: (f = msg.getUuid()) && proto.DUNEProcessManager.ProcessUUID.toObject(includeInstance, f),
    line: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DUNEProcessManager.LogLine}
 */
proto.DUNEProcessManager.LogLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DUNEProcessManager.LogLine;
  return proto.DUNEProcessManager.LogLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DUNEProcessManager.LogLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DUNEProcessManager.LogLine}
 */
proto.DUNEProcessManager.LogLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DUNEProcessManager.ProcessUUID;
      reader.readMessage(value,proto.DUNEProcessManager.ProcessUUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DUNEProcessManager.LogLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DUNEProcessManager.LogLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DUNEProcessManager.LogLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.LogLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DUNEProcessManager.ProcessUUID.serializeBinaryToWriter
    );
  }
  f = message.getLine();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ProcessUUID uuid = 1;
 * @return {?proto.DUNEProcessManager.ProcessUUID}
 */
proto.DUNEProcessManager.LogLine.prototype.getUuid = function() {
  return /** @type{?proto.DUNEProcessManager.ProcessUUID} */ (
    jspb.Message.getWrapperField(this, proto.DUNEProcessManager.ProcessUUID, 1));
};


/**
 * @param {?proto.DUNEProcessManager.ProcessUUID|undefined} value
 * @return {!proto.DUNEProcessManager.LogLine} returns this
*/
proto.DUNEProcessManager.LogLine.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DUNEProcessManager.LogLine} returns this
 */
proto.DUNEProcessManager.LogLine.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DUNEProcessManager.LogLine.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string line = 2;
 * @return {string}
 */
proto.DUNEProcessManager.LogLine.prototype.getLine = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DUNEProcessManager.LogLine} returns this
 */
proto.DUNEProcessManager.LogLine.prototype.setLine = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DUNEProcessManager.ProcessUUID.prototype.toObject = function(opt_includeInstance) {
  return proto.DUNEProcessManager.ProcessUUID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DUNEProcessManager.ProcessUUID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessUUID.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DUNEProcessManager.ProcessUUID}
 */
proto.DUNEProcessManager.ProcessUUID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DUNEProcessManager.ProcessUUID;
  return proto.DUNEProcessManager.ProcessUUID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DUNEProcessManager.ProcessUUID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DUNEProcessManager.ProcessUUID}
 */
proto.DUNEProcessManager.ProcessUUID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DUNEProcessManager.ProcessUUID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DUNEProcessManager.ProcessUUID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DUNEProcessManager.ProcessUUID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessUUID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.DUNEProcessManager.ProcessUUID.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DUNEProcessManager.ProcessUUID} returns this
 */
proto.DUNEProcessManager.ProcessUUID.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DUNEProcessManager.ProcessMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.DUNEProcessManager.ProcessMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DUNEProcessManager.ProcessMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: (f = msg.getUuid()) && proto.DUNEProcessManager.ProcessUUID.toObject(includeInstance, f),
    user: jspb.Message.getFieldWithDefault(msg, 2, ""),
    session: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DUNEProcessManager.ProcessMetadata}
 */
proto.DUNEProcessManager.ProcessMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DUNEProcessManager.ProcessMetadata;
  return proto.DUNEProcessManager.ProcessMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DUNEProcessManager.ProcessMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DUNEProcessManager.ProcessMetadata}
 */
proto.DUNEProcessManager.ProcessMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DUNEProcessManager.ProcessUUID;
      reader.readMessage(value,proto.DUNEProcessManager.ProcessUUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSession(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DUNEProcessManager.ProcessMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DUNEProcessManager.ProcessMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DUNEProcessManager.ProcessMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DUNEProcessManager.ProcessUUID.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSession();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional ProcessUUID uuid = 1;
 * @return {?proto.DUNEProcessManager.ProcessUUID}
 */
proto.DUNEProcessManager.ProcessMetadata.prototype.getUuid = function() {
  return /** @type{?proto.DUNEProcessManager.ProcessUUID} */ (
    jspb.Message.getWrapperField(this, proto.DUNEProcessManager.ProcessUUID, 1));
};


/**
 * @param {?proto.DUNEProcessManager.ProcessUUID|undefined} value
 * @return {!proto.DUNEProcessManager.ProcessMetadata} returns this
*/
proto.DUNEProcessManager.ProcessMetadata.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DUNEProcessManager.ProcessMetadata} returns this
 */
proto.DUNEProcessManager.ProcessMetadata.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DUNEProcessManager.ProcessMetadata.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user = 2;
 * @return {string}
 */
proto.DUNEProcessManager.ProcessMetadata.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DUNEProcessManager.ProcessMetadata} returns this
 */
proto.DUNEProcessManager.ProcessMetadata.prototype.setUser = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string session = 3;
 * @return {string}
 */
proto.DUNEProcessManager.ProcessMetadata.prototype.getSession = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.DUNEProcessManager.ProcessMetadata} returns this
 */
proto.DUNEProcessManager.ProcessMetadata.prototype.setSession = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.DUNEProcessManager.ProcessMetadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.DUNEProcessManager.ProcessMetadata} returns this
 */
proto.DUNEProcessManager.ProcessMetadata.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DUNEProcessManager.ProcessQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.DUNEProcessManager.ProcessQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DUNEProcessManager.ProcessQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: (f = msg.getUuid()) && proto.DUNEProcessManager.ProcessUUID.toObject(includeInstance, f),
    user: jspb.Message.getFieldWithDefault(msg, 2, ""),
    session: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    force: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DUNEProcessManager.ProcessQuery}
 */
proto.DUNEProcessManager.ProcessQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DUNEProcessManager.ProcessQuery;
  return proto.DUNEProcessManager.ProcessQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DUNEProcessManager.ProcessQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DUNEProcessManager.ProcessQuery}
 */
proto.DUNEProcessManager.ProcessQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DUNEProcessManager.ProcessUUID;
      reader.readMessage(value,proto.DUNEProcessManager.ProcessUUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSession(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DUNEProcessManager.ProcessQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DUNEProcessManager.ProcessQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DUNEProcessManager.ProcessQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DUNEProcessManager.ProcessUUID.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getForce();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional ProcessUUID uuid = 1;
 * @return {?proto.DUNEProcessManager.ProcessUUID}
 */
proto.DUNEProcessManager.ProcessQuery.prototype.getUuid = function() {
  return /** @type{?proto.DUNEProcessManager.ProcessUUID} */ (
    jspb.Message.getWrapperField(this, proto.DUNEProcessManager.ProcessUUID, 1));
};


/**
 * @param {?proto.DUNEProcessManager.ProcessUUID|undefined} value
 * @return {!proto.DUNEProcessManager.ProcessQuery} returns this
*/
proto.DUNEProcessManager.ProcessQuery.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DUNEProcessManager.ProcessQuery} returns this
 */
proto.DUNEProcessManager.ProcessQuery.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DUNEProcessManager.ProcessQuery.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user = 2;
 * @return {string}
 */
proto.DUNEProcessManager.ProcessQuery.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DUNEProcessManager.ProcessQuery} returns this
 */
proto.DUNEProcessManager.ProcessQuery.prototype.setUser = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DUNEProcessManager.ProcessQuery} returns this
 */
proto.DUNEProcessManager.ProcessQuery.prototype.clearUser = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DUNEProcessManager.ProcessQuery.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string session = 3;
 * @return {string}
 */
proto.DUNEProcessManager.ProcessQuery.prototype.getSession = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.DUNEProcessManager.ProcessQuery} returns this
 */
proto.DUNEProcessManager.ProcessQuery.prototype.setSession = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DUNEProcessManager.ProcessQuery} returns this
 */
proto.DUNEProcessManager.ProcessQuery.prototype.clearSession = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DUNEProcessManager.ProcessQuery.prototype.hasSession = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.DUNEProcessManager.ProcessQuery.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.DUNEProcessManager.ProcessQuery} returns this
 */
proto.DUNEProcessManager.ProcessQuery.prototype.setName = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DUNEProcessManager.ProcessQuery} returns this
 */
proto.DUNEProcessManager.ProcessQuery.prototype.clearName = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DUNEProcessManager.ProcessQuery.prototype.hasName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool force = 5;
 * @return {boolean}
 */
proto.DUNEProcessManager.ProcessQuery.prototype.getForce = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.DUNEProcessManager.ProcessQuery} returns this
 */
proto.DUNEProcessManager.ProcessQuery.prototype.setForce = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DUNEProcessManager.ProcessDescription.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DUNEProcessManager.ProcessDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.DUNEProcessManager.ProcessDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DUNEProcessManager.ProcessDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.DUNEProcessManager.ProcessMetadata.toObject(includeInstance, f),
    envMap: (f = msg.getEnvMap()) ? f.toObject(includeInstance, undefined) : [],
    executableAndArgumentsList: jspb.Message.toObjectList(msg.getExecutableAndArgumentsList(),
    proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DUNEProcessManager.ProcessDescription}
 */
proto.DUNEProcessManager.ProcessDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DUNEProcessManager.ProcessDescription;
  return proto.DUNEProcessManager.ProcessDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DUNEProcessManager.ProcessDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DUNEProcessManager.ProcessDescription}
 */
proto.DUNEProcessManager.ProcessDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DUNEProcessManager.ProcessMetadata;
      reader.readMessage(value,proto.DUNEProcessManager.ProcessMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = msg.getEnvMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 3:
      var value = new proto.DUNEProcessManager.ProcessDescription.ExecAndArgs;
      reader.readMessage(value,proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.deserializeBinaryFromReader);
      msg.addExecutableAndArguments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DUNEProcessManager.ProcessDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DUNEProcessManager.ProcessDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DUNEProcessManager.ProcessDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DUNEProcessManager.ProcessMetadata.serializeBinaryToWriter
    );
  }
  f = message.getEnvMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getExecutableAndArgumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DUNEProcessManager.ProcessDescription.StringList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DUNEProcessManager.ProcessDescription.StringList.prototype.toObject = function(opt_includeInstance) {
  return proto.DUNEProcessManager.ProcessDescription.StringList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DUNEProcessManager.ProcessDescription.StringList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessDescription.StringList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DUNEProcessManager.ProcessDescription.StringList}
 */
proto.DUNEProcessManager.ProcessDescription.StringList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DUNEProcessManager.ProcessDescription.StringList;
  return proto.DUNEProcessManager.ProcessDescription.StringList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DUNEProcessManager.ProcessDescription.StringList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DUNEProcessManager.ProcessDescription.StringList}
 */
proto.DUNEProcessManager.ProcessDescription.StringList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DUNEProcessManager.ProcessDescription.StringList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DUNEProcessManager.ProcessDescription.StringList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DUNEProcessManager.ProcessDescription.StringList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessDescription.StringList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string values = 1;
 * @return {!Array<string>}
 */
proto.DUNEProcessManager.ProcessDescription.StringList.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.DUNEProcessManager.ProcessDescription.StringList} returns this
 */
proto.DUNEProcessManager.ProcessDescription.StringList.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.DUNEProcessManager.ProcessDescription.StringList} returns this
 */
proto.DUNEProcessManager.ProcessDescription.StringList.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DUNEProcessManager.ProcessDescription.StringList} returns this
 */
proto.DUNEProcessManager.ProcessDescription.StringList.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DUNEProcessManager.ProcessDescription.ExecAndArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    exec: jspb.Message.getFieldWithDefault(msg, 1, ""),
    argsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DUNEProcessManager.ProcessDescription.ExecAndArgs}
 */
proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DUNEProcessManager.ProcessDescription.ExecAndArgs;
  return proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DUNEProcessManager.ProcessDescription.ExecAndArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DUNEProcessManager.ProcessDescription.ExecAndArgs}
 */
proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExec(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DUNEProcessManager.ProcessDescription.ExecAndArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExec();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string exec = 1;
 * @return {string}
 */
proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.prototype.getExec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DUNEProcessManager.ProcessDescription.ExecAndArgs} returns this
 */
proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.prototype.setExec = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string args = 2;
 * @return {!Array<string>}
 */
proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.DUNEProcessManager.ProcessDescription.ExecAndArgs} returns this
 */
proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.prototype.setArgsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.DUNEProcessManager.ProcessDescription.ExecAndArgs} returns this
 */
proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.prototype.addArgs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DUNEProcessManager.ProcessDescription.ExecAndArgs} returns this
 */
proto.DUNEProcessManager.ProcessDescription.ExecAndArgs.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * optional ProcessMetadata metadata = 1;
 * @return {?proto.DUNEProcessManager.ProcessMetadata}
 */
proto.DUNEProcessManager.ProcessDescription.prototype.getMetadata = function() {
  return /** @type{?proto.DUNEProcessManager.ProcessMetadata} */ (
    jspb.Message.getWrapperField(this, proto.DUNEProcessManager.ProcessMetadata, 1));
};


/**
 * @param {?proto.DUNEProcessManager.ProcessMetadata|undefined} value
 * @return {!proto.DUNEProcessManager.ProcessDescription} returns this
*/
proto.DUNEProcessManager.ProcessDescription.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DUNEProcessManager.ProcessDescription} returns this
 */
proto.DUNEProcessManager.ProcessDescription.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DUNEProcessManager.ProcessDescription.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, string> env = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.DUNEProcessManager.ProcessDescription.prototype.getEnvMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.DUNEProcessManager.ProcessDescription} returns this
 */
proto.DUNEProcessManager.ProcessDescription.prototype.clearEnvMap = function() {
  this.getEnvMap().clear();
  return this;};


/**
 * repeated ExecAndArgs executable_and_arguments = 3;
 * @return {!Array<!proto.DUNEProcessManager.ProcessDescription.ExecAndArgs>}
 */
proto.DUNEProcessManager.ProcessDescription.prototype.getExecutableAndArgumentsList = function() {
  return /** @type{!Array<!proto.DUNEProcessManager.ProcessDescription.ExecAndArgs>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DUNEProcessManager.ProcessDescription.ExecAndArgs, 3));
};


/**
 * @param {!Array<!proto.DUNEProcessManager.ProcessDescription.ExecAndArgs>} value
 * @return {!proto.DUNEProcessManager.ProcessDescription} returns this
*/
proto.DUNEProcessManager.ProcessDescription.prototype.setExecutableAndArgumentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.DUNEProcessManager.ProcessDescription.ExecAndArgs=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DUNEProcessManager.ProcessDescription.ExecAndArgs}
 */
proto.DUNEProcessManager.ProcessDescription.prototype.addExecutableAndArguments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.DUNEProcessManager.ProcessDescription.ExecAndArgs, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DUNEProcessManager.ProcessDescription} returns this
 */
proto.DUNEProcessManager.ProcessDescription.prototype.clearExecutableAndArgumentsList = function() {
  return this.setExecutableAndArgumentsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DUNEProcessManager.ProcessInstance.prototype.toObject = function(opt_includeInstance) {
  return proto.DUNEProcessManager.ProcessInstance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DUNEProcessManager.ProcessInstance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessInstance.toObject = function(includeInstance, msg) {
  var f, obj = {
    processDescription: (f = msg.getProcessDescription()) && proto.DUNEProcessManager.ProcessDescription.toObject(includeInstance, f),
    processRestriction: (f = msg.getProcessRestriction()) && proto.DUNEProcessManager.ProcessRestriction.toObject(includeInstance, f),
    statusCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    returnCode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    uuid: (f = msg.getUuid()) && proto.DUNEProcessManager.ProcessUUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DUNEProcessManager.ProcessInstance}
 */
proto.DUNEProcessManager.ProcessInstance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DUNEProcessManager.ProcessInstance;
  return proto.DUNEProcessManager.ProcessInstance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DUNEProcessManager.ProcessInstance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DUNEProcessManager.ProcessInstance}
 */
proto.DUNEProcessManager.ProcessInstance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DUNEProcessManager.ProcessDescription;
      reader.readMessage(value,proto.DUNEProcessManager.ProcessDescription.deserializeBinaryFromReader);
      msg.setProcessDescription(value);
      break;
    case 2:
      var value = new proto.DUNEProcessManager.ProcessRestriction;
      reader.readMessage(value,proto.DUNEProcessManager.ProcessRestriction.deserializeBinaryFromReader);
      msg.setProcessRestriction(value);
      break;
    case 3:
      var value = /** @type {!proto.DUNEProcessManager.ProcessInstance.StatusCode} */ (reader.readEnum());
      msg.setStatusCode(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReturnCode(value);
      break;
    case 5:
      var value = new proto.DUNEProcessManager.ProcessUUID;
      reader.readMessage(value,proto.DUNEProcessManager.ProcessUUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DUNEProcessManager.ProcessInstance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DUNEProcessManager.ProcessInstance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DUNEProcessManager.ProcessInstance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessInstance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessDescription();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DUNEProcessManager.ProcessDescription.serializeBinaryToWriter
    );
  }
  f = message.getProcessRestriction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.DUNEProcessManager.ProcessRestriction.serializeBinaryToWriter
    );
  }
  f = message.getStatusCode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.DUNEProcessManager.ProcessUUID.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.DUNEProcessManager.ProcessInstance.StatusCode = {
  RUNNING: 0,
  DEAD: 1
};

/**
 * optional ProcessDescription process_description = 1;
 * @return {?proto.DUNEProcessManager.ProcessDescription}
 */
proto.DUNEProcessManager.ProcessInstance.prototype.getProcessDescription = function() {
  return /** @type{?proto.DUNEProcessManager.ProcessDescription} */ (
    jspb.Message.getWrapperField(this, proto.DUNEProcessManager.ProcessDescription, 1));
};


/**
 * @param {?proto.DUNEProcessManager.ProcessDescription|undefined} value
 * @return {!proto.DUNEProcessManager.ProcessInstance} returns this
*/
proto.DUNEProcessManager.ProcessInstance.prototype.setProcessDescription = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DUNEProcessManager.ProcessInstance} returns this
 */
proto.DUNEProcessManager.ProcessInstance.prototype.clearProcessDescription = function() {
  return this.setProcessDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DUNEProcessManager.ProcessInstance.prototype.hasProcessDescription = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProcessRestriction process_restriction = 2;
 * @return {?proto.DUNEProcessManager.ProcessRestriction}
 */
proto.DUNEProcessManager.ProcessInstance.prototype.getProcessRestriction = function() {
  return /** @type{?proto.DUNEProcessManager.ProcessRestriction} */ (
    jspb.Message.getWrapperField(this, proto.DUNEProcessManager.ProcessRestriction, 2));
};


/**
 * @param {?proto.DUNEProcessManager.ProcessRestriction|undefined} value
 * @return {!proto.DUNEProcessManager.ProcessInstance} returns this
*/
proto.DUNEProcessManager.ProcessInstance.prototype.setProcessRestriction = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DUNEProcessManager.ProcessInstance} returns this
 */
proto.DUNEProcessManager.ProcessInstance.prototype.clearProcessRestriction = function() {
  return this.setProcessRestriction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DUNEProcessManager.ProcessInstance.prototype.hasProcessRestriction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StatusCode status_code = 3;
 * @return {!proto.DUNEProcessManager.ProcessInstance.StatusCode}
 */
proto.DUNEProcessManager.ProcessInstance.prototype.getStatusCode = function() {
  return /** @type {!proto.DUNEProcessManager.ProcessInstance.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.DUNEProcessManager.ProcessInstance.StatusCode} value
 * @return {!proto.DUNEProcessManager.ProcessInstance} returns this
 */
proto.DUNEProcessManager.ProcessInstance.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 return_code = 4;
 * @return {number}
 */
proto.DUNEProcessManager.ProcessInstance.prototype.getReturnCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.DUNEProcessManager.ProcessInstance} returns this
 */
proto.DUNEProcessManager.ProcessInstance.prototype.setReturnCode = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DUNEProcessManager.ProcessInstance} returns this
 */
proto.DUNEProcessManager.ProcessInstance.prototype.clearReturnCode = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DUNEProcessManager.ProcessInstance.prototype.hasReturnCode = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ProcessUUID uuid = 5;
 * @return {?proto.DUNEProcessManager.ProcessUUID}
 */
proto.DUNEProcessManager.ProcessInstance.prototype.getUuid = function() {
  return /** @type{?proto.DUNEProcessManager.ProcessUUID} */ (
    jspb.Message.getWrapperField(this, proto.DUNEProcessManager.ProcessUUID, 5));
};


/**
 * @param {?proto.DUNEProcessManager.ProcessUUID|undefined} value
 * @return {!proto.DUNEProcessManager.ProcessInstance} returns this
*/
proto.DUNEProcessManager.ProcessInstance.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DUNEProcessManager.ProcessInstance} returns this
 */
proto.DUNEProcessManager.ProcessInstance.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DUNEProcessManager.ProcessInstance.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DUNEProcessManager.BootRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DUNEProcessManager.BootRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DUNEProcessManager.BootRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.BootRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    processDescription: (f = msg.getProcessDescription()) && proto.DUNEProcessManager.ProcessDescription.toObject(includeInstance, f),
    processRestriction: (f = msg.getProcessRestriction()) && proto.DUNEProcessManager.ProcessRestriction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DUNEProcessManager.BootRequest}
 */
proto.DUNEProcessManager.BootRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DUNEProcessManager.BootRequest;
  return proto.DUNEProcessManager.BootRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DUNEProcessManager.BootRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DUNEProcessManager.BootRequest}
 */
proto.DUNEProcessManager.BootRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DUNEProcessManager.ProcessDescription;
      reader.readMessage(value,proto.DUNEProcessManager.ProcessDescription.deserializeBinaryFromReader);
      msg.setProcessDescription(value);
      break;
    case 2:
      var value = new proto.DUNEProcessManager.ProcessRestriction;
      reader.readMessage(value,proto.DUNEProcessManager.ProcessRestriction.deserializeBinaryFromReader);
      msg.setProcessRestriction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DUNEProcessManager.BootRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DUNEProcessManager.BootRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DUNEProcessManager.BootRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.BootRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessDescription();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DUNEProcessManager.ProcessDescription.serializeBinaryToWriter
    );
  }
  f = message.getProcessRestriction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.DUNEProcessManager.ProcessRestriction.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProcessDescription process_description = 1;
 * @return {?proto.DUNEProcessManager.ProcessDescription}
 */
proto.DUNEProcessManager.BootRequest.prototype.getProcessDescription = function() {
  return /** @type{?proto.DUNEProcessManager.ProcessDescription} */ (
    jspb.Message.getWrapperField(this, proto.DUNEProcessManager.ProcessDescription, 1));
};


/**
 * @param {?proto.DUNEProcessManager.ProcessDescription|undefined} value
 * @return {!proto.DUNEProcessManager.BootRequest} returns this
*/
proto.DUNEProcessManager.BootRequest.prototype.setProcessDescription = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DUNEProcessManager.BootRequest} returns this
 */
proto.DUNEProcessManager.BootRequest.prototype.clearProcessDescription = function() {
  return this.setProcessDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DUNEProcessManager.BootRequest.prototype.hasProcessDescription = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProcessRestriction process_restriction = 2;
 * @return {?proto.DUNEProcessManager.ProcessRestriction}
 */
proto.DUNEProcessManager.BootRequest.prototype.getProcessRestriction = function() {
  return /** @type{?proto.DUNEProcessManager.ProcessRestriction} */ (
    jspb.Message.getWrapperField(this, proto.DUNEProcessManager.ProcessRestriction, 2));
};


/**
 * @param {?proto.DUNEProcessManager.ProcessRestriction|undefined} value
 * @return {!proto.DUNEProcessManager.BootRequest} returns this
*/
proto.DUNEProcessManager.BootRequest.prototype.setProcessRestriction = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DUNEProcessManager.BootRequest} returns this
 */
proto.DUNEProcessManager.BootRequest.prototype.clearProcessRestriction = function() {
  return this.setProcessRestriction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DUNEProcessManager.BootRequest.prototype.hasProcessRestriction = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DUNEProcessManager.ProcessInstanceList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DUNEProcessManager.ProcessInstanceList.prototype.toObject = function(opt_includeInstance) {
  return proto.DUNEProcessManager.ProcessInstanceList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DUNEProcessManager.ProcessInstanceList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessInstanceList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.DUNEProcessManager.ProcessInstance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DUNEProcessManager.ProcessInstanceList}
 */
proto.DUNEProcessManager.ProcessInstanceList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DUNEProcessManager.ProcessInstanceList;
  return proto.DUNEProcessManager.ProcessInstanceList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DUNEProcessManager.ProcessInstanceList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DUNEProcessManager.ProcessInstanceList}
 */
proto.DUNEProcessManager.ProcessInstanceList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DUNEProcessManager.ProcessInstance;
      reader.readMessage(value,proto.DUNEProcessManager.ProcessInstance.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DUNEProcessManager.ProcessInstanceList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DUNEProcessManager.ProcessInstanceList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DUNEProcessManager.ProcessInstanceList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DUNEProcessManager.ProcessInstanceList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.DUNEProcessManager.ProcessInstance.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProcessInstance values = 1;
 * @return {!Array<!proto.DUNEProcessManager.ProcessInstance>}
 */
proto.DUNEProcessManager.ProcessInstanceList.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.DUNEProcessManager.ProcessInstance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DUNEProcessManager.ProcessInstance, 1));
};


/**
 * @param {!Array<!proto.DUNEProcessManager.ProcessInstance>} value
 * @return {!proto.DUNEProcessManager.ProcessInstanceList} returns this
*/
proto.DUNEProcessManager.ProcessInstanceList.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.DUNEProcessManager.ProcessInstance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DUNEProcessManager.ProcessInstance}
 */
proto.DUNEProcessManager.ProcessInstanceList.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.DUNEProcessManager.ProcessInstance, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DUNEProcessManager.ProcessInstanceList} returns this
 */
proto.DUNEProcessManager.ProcessInstanceList.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};


goog.object.extend(exports, proto.DUNEProcessManager);
