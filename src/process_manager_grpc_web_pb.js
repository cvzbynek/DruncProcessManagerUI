/**
 * @fileoverview gRPC-Web generated client stub for DUNEProcessManager
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.1
// source: process_manager.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var request_response_pb = require('./request_response_pb.js')
const proto = {};
proto.DUNEProcessManager = require('./process_manager_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.DUNEProcessManager.ProcessManagerClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.DUNEProcessManager.ProcessManagerPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Request,
 *   !proto.Response>}
 */
const methodDescriptor_ProcessManager_boot = new grpc.web.MethodDescriptor(
  '/DUNEProcessManager.ProcessManager/boot',
  grpc.web.MethodType.UNARY,
  request_response_pb.Request,
  request_response_pb.Response,
  /**
   * @param {!proto.Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  request_response_pb.Response.deserializeBinary
);


/**
 * @param {!proto.Request} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DUNEProcessManager.ProcessManagerClient.prototype.boot =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DUNEProcessManager.ProcessManager/boot',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_boot,
      callback);
};


/**
 * @param {!proto.Request} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.DUNEProcessManager.ProcessManagerPromiseClient.prototype.boot =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DUNEProcessManager.ProcessManager/boot',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_boot);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Request,
 *   !proto.Response>}
 */
const methodDescriptor_ProcessManager_restart = new grpc.web.MethodDescriptor(
  '/DUNEProcessManager.ProcessManager/restart',
  grpc.web.MethodType.UNARY,
  request_response_pb.Request,
  request_response_pb.Response,
  /**
   * @param {!proto.Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  request_response_pb.Response.deserializeBinary
);


/**
 * @param {!proto.Request} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DUNEProcessManager.ProcessManagerClient.prototype.restart =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DUNEProcessManager.ProcessManager/restart',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_restart,
      callback);
};


/**
 * @param {!proto.Request} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.DUNEProcessManager.ProcessManagerPromiseClient.prototype.restart =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DUNEProcessManager.ProcessManager/restart',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_restart);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Request,
 *   !proto.Response>}
 */
const methodDescriptor_ProcessManager_is_alive = new grpc.web.MethodDescriptor(
  '/DUNEProcessManager.ProcessManager/is_alive',
  grpc.web.MethodType.UNARY,
  request_response_pb.Request,
  request_response_pb.Response,
  /**
   * @param {!proto.Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  request_response_pb.Response.deserializeBinary
);


/**
 * @param {!proto.Request} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DUNEProcessManager.ProcessManagerClient.prototype.is_alive =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DUNEProcessManager.ProcessManager/is_alive',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_is_alive,
      callback);
};


/**
 * @param {!proto.Request} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.DUNEProcessManager.ProcessManagerPromiseClient.prototype.is_alive =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DUNEProcessManager.ProcessManager/is_alive',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_is_alive);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Request,
 *   !proto.Response>}
 */
const methodDescriptor_ProcessManager_kill = new grpc.web.MethodDescriptor(
  '/DUNEProcessManager.ProcessManager/kill',
  grpc.web.MethodType.UNARY,
  request_response_pb.Request,
  request_response_pb.Response,
  /**
   * @param {!proto.Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  request_response_pb.Response.deserializeBinary
);


/**
 * @param {!proto.Request} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DUNEProcessManager.ProcessManagerClient.prototype.kill =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DUNEProcessManager.ProcessManager/kill',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_kill,
      callback);
};


/**
 * @param {!proto.Request} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.DUNEProcessManager.ProcessManagerPromiseClient.prototype.kill =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DUNEProcessManager.ProcessManager/kill',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_kill);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Request,
 *   !proto.Response>}
 */
const methodDescriptor_ProcessManager_killall = new grpc.web.MethodDescriptor(
  '/DUNEProcessManager.ProcessManager/killall',
  grpc.web.MethodType.UNARY,
  request_response_pb.Request,
  request_response_pb.Response,
  /**
   * @param {!proto.Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  request_response_pb.Response.deserializeBinary
);


/**
 * @param {!proto.Request} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DUNEProcessManager.ProcessManagerClient.prototype.killall =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DUNEProcessManager.ProcessManager/killall',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_killall,
      callback);
};


/**
 * @param {!proto.Request} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.DUNEProcessManager.ProcessManagerPromiseClient.prototype.killall =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DUNEProcessManager.ProcessManager/killall',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_killall);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Request,
 *   !proto.Response>}
 */
const methodDescriptor_ProcessManager_flush = new grpc.web.MethodDescriptor(
  '/DUNEProcessManager.ProcessManager/flush',
  grpc.web.MethodType.UNARY,
  request_response_pb.Request,
  request_response_pb.Response,
  /**
   * @param {!proto.Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  request_response_pb.Response.deserializeBinary
);


/**
 * @param {!proto.Request} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DUNEProcessManager.ProcessManagerClient.prototype.flush =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DUNEProcessManager.ProcessManager/flush',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_flush,
      callback);
};


/**
 * @param {!proto.Request} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.DUNEProcessManager.ProcessManagerPromiseClient.prototype.flush =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DUNEProcessManager.ProcessManager/flush',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_flush);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Request,
 *   !proto.Response>}
 */
const methodDescriptor_ProcessManager_list_process = new grpc.web.MethodDescriptor(
  '/DUNEProcessManager.ProcessManager/list_process',
  grpc.web.MethodType.UNARY,
  request_response_pb.Request,
  request_response_pb.Response,
  /**
   * @param {!proto.Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  request_response_pb.Response.deserializeBinary
);


/**
 * @param {!proto.Request} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DUNEProcessManager.ProcessManagerClient.prototype.list_process =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DUNEProcessManager.ProcessManager/list_process',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_list_process,
      callback);
};


/**
 * @param {!proto.Request} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.DUNEProcessManager.ProcessManagerPromiseClient.prototype.list_process =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DUNEProcessManager.ProcessManager/list_process',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_list_process);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Request,
 *   !proto.DUNEProcessManager.LogLine>}
 */
const methodDescriptor_ProcessManager_logs = new grpc.web.MethodDescriptor(
  '/DUNEProcessManager.ProcessManager/logs',
  grpc.web.MethodType.SERVER_STREAMING,
  request_response_pb.Request,
  proto.DUNEProcessManager.LogLine,
  /**
   * @param {!proto.Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DUNEProcessManager.LogLine.deserializeBinary
);


/**
 * @param {!proto.Request} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.DUNEProcessManager.LogLine>}
 *     The XHR Node Readable Stream
 */
proto.DUNEProcessManager.ProcessManagerClient.prototype.logs =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/DUNEProcessManager.ProcessManager/logs',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_logs);
};


/**
 * @param {!proto.Request} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.DUNEProcessManager.LogLine>}
 *     The XHR Node Readable Stream
 */
proto.DUNEProcessManager.ProcessManagerPromiseClient.prototype.logs =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/DUNEProcessManager.ProcessManager/logs',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_logs);
};


module.exports = proto.DUNEProcessManager;

