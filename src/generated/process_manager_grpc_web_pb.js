/**
 * @fileoverview gRPC-Web generated client stub for dunedaq.druncschema
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.1
// source: process_manager.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var request_response_pb = require('./request_response_pb.js')
const proto = {};
proto.dunedaq = {};
proto.dunedaq.druncschema = require('./process_manager_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dunedaq.druncschema.ProcessManagerClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dunedaq.druncschema.ProcessManagerPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dunedaq.druncschema.Request,
 *   !proto.dunedaq.druncschema.Response>}
 */
const methodDescriptor_ProcessManager_describe = new grpc.web.MethodDescriptor(
  '/dunedaq.druncschema.ProcessManager/describe',
  grpc.web.MethodType.UNARY,
  request_response_pb.Request,
  request_response_pb.Response,
  /**
   * @param {!proto.dunedaq.druncschema.Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  request_response_pb.Response.deserializeBinary
);


/**
 * @param {!proto.dunedaq.druncschema.Request} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dunedaq.druncschema.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dunedaq.druncschema.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dunedaq.druncschema.ProcessManagerClient.prototype.describe =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dunedaq.druncschema.ProcessManager/describe',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_describe,
      callback);
};


/**
 * @param {!proto.dunedaq.druncschema.Request} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dunedaq.druncschema.Response>}
 *     Promise that resolves to the response
 */
proto.dunedaq.druncschema.ProcessManagerPromiseClient.prototype.describe =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dunedaq.druncschema.ProcessManager/describe',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_describe);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dunedaq.druncschema.Request,
 *   !proto.dunedaq.druncschema.Response>}
 */
const methodDescriptor_ProcessManager_boot = new grpc.web.MethodDescriptor(
  '/dunedaq.druncschema.ProcessManager/boot',
  grpc.web.MethodType.UNARY,
  request_response_pb.Request,
  request_response_pb.Response,
  /**
   * @param {!proto.dunedaq.druncschema.Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  request_response_pb.Response.deserializeBinary
);


/**
 * @param {!proto.dunedaq.druncschema.Request} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dunedaq.druncschema.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dunedaq.druncschema.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dunedaq.druncschema.ProcessManagerClient.prototype.boot =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dunedaq.druncschema.ProcessManager/boot',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_boot,
      callback);
};


/**
 * @param {!proto.dunedaq.druncschema.Request} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dunedaq.druncschema.Response>}
 *     Promise that resolves to the response
 */
proto.dunedaq.druncschema.ProcessManagerPromiseClient.prototype.boot =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dunedaq.druncschema.ProcessManager/boot',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_boot);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dunedaq.druncschema.Request,
 *   !proto.dunedaq.druncschema.Response>}
 */
const methodDescriptor_ProcessManager_restart = new grpc.web.MethodDescriptor(
  '/dunedaq.druncschema.ProcessManager/restart',
  grpc.web.MethodType.UNARY,
  request_response_pb.Request,
  request_response_pb.Response,
  /**
   * @param {!proto.dunedaq.druncschema.Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  request_response_pb.Response.deserializeBinary
);


/**
 * @param {!proto.dunedaq.druncschema.Request} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dunedaq.druncschema.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dunedaq.druncschema.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dunedaq.druncschema.ProcessManagerClient.prototype.restart =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dunedaq.druncschema.ProcessManager/restart',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_restart,
      callback);
};


/**
 * @param {!proto.dunedaq.druncschema.Request} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dunedaq.druncschema.Response>}
 *     Promise that resolves to the response
 */
proto.dunedaq.druncschema.ProcessManagerPromiseClient.prototype.restart =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dunedaq.druncschema.ProcessManager/restart',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_restart);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dunedaq.druncschema.Request,
 *   !proto.dunedaq.druncschema.Response>}
 */
const methodDescriptor_ProcessManager_kill = new grpc.web.MethodDescriptor(
  '/dunedaq.druncschema.ProcessManager/kill',
  grpc.web.MethodType.UNARY,
  request_response_pb.Request,
  request_response_pb.Response,
  /**
   * @param {!proto.dunedaq.druncschema.Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  request_response_pb.Response.deserializeBinary
);


/**
 * @param {!proto.dunedaq.druncschema.Request} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dunedaq.druncschema.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dunedaq.druncschema.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dunedaq.druncschema.ProcessManagerClient.prototype.kill =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dunedaq.druncschema.ProcessManager/kill',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_kill,
      callback);
};


/**
 * @param {!proto.dunedaq.druncschema.Request} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dunedaq.druncschema.Response>}
 *     Promise that resolves to the response
 */
proto.dunedaq.druncschema.ProcessManagerPromiseClient.prototype.kill =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dunedaq.druncschema.ProcessManager/kill',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_kill);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dunedaq.druncschema.Request,
 *   !proto.dunedaq.druncschema.Response>}
 */
const methodDescriptor_ProcessManager_flush = new grpc.web.MethodDescriptor(
  '/dunedaq.druncschema.ProcessManager/flush',
  grpc.web.MethodType.UNARY,
  request_response_pb.Request,
  request_response_pb.Response,
  /**
   * @param {!proto.dunedaq.druncschema.Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  request_response_pb.Response.deserializeBinary
);


/**
 * @param {!proto.dunedaq.druncschema.Request} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dunedaq.druncschema.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dunedaq.druncschema.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dunedaq.druncschema.ProcessManagerClient.prototype.flush =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dunedaq.druncschema.ProcessManager/flush',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_flush,
      callback);
};


/**
 * @param {!proto.dunedaq.druncschema.Request} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dunedaq.druncschema.Response>}
 *     Promise that resolves to the response
 */
proto.dunedaq.druncschema.ProcessManagerPromiseClient.prototype.flush =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dunedaq.druncschema.ProcessManager/flush',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_flush);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dunedaq.druncschema.Request,
 *   !proto.dunedaq.druncschema.Response>}
 */
const methodDescriptor_ProcessManager_ps = new grpc.web.MethodDescriptor(
  '/dunedaq.druncschema.ProcessManager/ps',
  grpc.web.MethodType.UNARY,
  request_response_pb.Request,
  request_response_pb.Response,
  /**
   * @param {!proto.dunedaq.druncschema.Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  request_response_pb.Response.deserializeBinary
);


/**
 * @param {!proto.dunedaq.druncschema.Request} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dunedaq.druncschema.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dunedaq.druncschema.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dunedaq.druncschema.ProcessManagerClient.prototype.ps =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dunedaq.druncschema.ProcessManager/ps',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_ps,
      callback);
};


/**
 * @param {!proto.dunedaq.druncschema.Request} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dunedaq.druncschema.Response>}
 *     Promise that resolves to the response
 */
proto.dunedaq.druncschema.ProcessManagerPromiseClient.prototype.ps =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dunedaq.druncschema.ProcessManager/ps',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_ps);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dunedaq.druncschema.Request,
 *   !proto.dunedaq.druncschema.Response>}
 */
const methodDescriptor_ProcessManager_logs = new grpc.web.MethodDescriptor(
  '/dunedaq.druncschema.ProcessManager/logs',
  grpc.web.MethodType.SERVER_STREAMING,
  request_response_pb.Request,
  request_response_pb.Response,
  /**
   * @param {!proto.dunedaq.druncschema.Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  request_response_pb.Response.deserializeBinary
);


/**
 * @param {!proto.dunedaq.druncschema.Request} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dunedaq.druncschema.Response>}
 *     The XHR Node Readable Stream
 */
proto.dunedaq.druncschema.ProcessManagerClient.prototype.logs =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/dunedaq.druncschema.ProcessManager/logs',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_logs);
};


/**
 * @param {!proto.dunedaq.druncschema.Request} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dunedaq.druncschema.Response>}
 *     The XHR Node Readable Stream
 */
proto.dunedaq.druncschema.ProcessManagerPromiseClient.prototype.logs =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/dunedaq.druncschema.ProcessManager/logs',
      request,
      metadata || {},
      methodDescriptor_ProcessManager_logs);
};


module.exports = proto.dunedaq.druncschema;

